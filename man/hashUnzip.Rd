% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hashUnzip.R
\docType{methods}
\name{hashUnzip}
\alias{hashUnzip}
\title{Extract files from a zip archive and log checksum value to avoid repeating event}
\usage{
hashUnzip(zipfile, destfile, checkhash = TRUE, quick = FALSE,
  dbHash = "dbHash.sqlite")
}
\arguments{
\item{zipfile}{A character vector. Contains path to zipfile.}

\item{destfile}{A character string. Represents the name where unzip file is saved.}

\item{checkhash}{Logical. If \code{TRUE}, check if untzipped file exists locally and compare
checksum value with checksum logged from previous event. When checksums don't
match or unzip file doesn't exist, \code{unzip} and \code{digest} are performed.
If \code{FALSE} (default), only \code{unzip} is performed.}

\item{quick}{Logical. If \code{TRUE}, \code{digest} is performed using the combination of
unzipped filename and its size. If \code{FALSE} (default), \code{digest} is performed
using the object.}

\item{dbHash}{A character string. Represents path to SQLite database file where checksum value
from \code{digest} is logged. If the database doesn't exist, one is created. Default is
\code{"dbHash.sqlite"}.}
}
\value{
Unzipped \code{zipfile} in a subfolder under \code{destfile} using
         \code{basename{tarfile}}name.
}
\description{
Prior to unzip, the function check if untar was previously performed (unzipped file exist
locally) and compare checksum value from previous event when present. Unzip is performed
when file doesn't exists or checksums don't match.
}
\examples{
url<-"http://ftp.geogratis.gc.ca/pub/nrcan_rncan/archive/vector/cli_itc_50k/land_use/L040J03.zip"
hashDownload(url, destfile = tempdir(), checkhash= FALSE, cascade = FALSE)
zip <- file.path(tempdir(), basename(url))
hashUnzip(zip, tempdir(), checkhash= FALSE)
}

}
\author{
Melina Houle
}
