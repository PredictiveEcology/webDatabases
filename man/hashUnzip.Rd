% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hashUnzip.R
\docType{methods}
\name{hashUnzip}
\alias{hashUnzip}
\title{Extract files from a zip archive downloaded}
\usage{
hashUnzip(zipfile, dir, checkhash = TRUE, quick = TRUE, dbHash)
}
\arguments{
\item{zipfile}{A character vector containing path to a zipfile.}

\item{dir}{A character string representing the output directory path.}

\item{checkhash}{A logical argument. If TRUE, check if unzip file is found locally and cross-check its checksum value
with value logged in dbHash from previous unzip event. When checksums match, a message raises indicating the file
is already properly unzip. When checksums doesn't match or unzip file doesn't exist locally, unzip occurs and
checksum compiles. If FALSE, unzip occurs even if the files exist locally. Default is FALSE.}

\item{quick}{A logical argument. If TRUE, checksum is compiled using the combination of the filename and its size.
If FALSE, cheksum is compiled using the object. Default is FALSE.}

\item{dbHash}{A character string. The path to the database file where checksum values are logged. If the named
database does not yet exist, one is created. Default is "dbHash.sqlite".}
}
\description{
This function unzip dataset previously downloaded from url. Prior to unzip, the function can check if unzip
was previously performed (unzip file exists locally).
}
\examples{
library(SpaDES)
sim <- SpaDES::simInit(times = list(start=0.0, end=5.0),
                       objects=list(),
                       params = list(),
                       modules = list(),
                       paths = list(outputPath=tempdir()))
url<-"ftp://ccrp.tor.ec.gc.ca/pub/EC_data/AHCCD_daily/Homog_daily_mean_temp_v2016.zip"
algo = "xxhash64"
destfile <- tempdir()
hashDownload(url, destfile, sim, module, cascade = FALSE)
zip <- file.path(destfile, basename(url))
hashUnzip(zip, checkhash = FALSE, dbHash = "dbHash.sqlite", quick = FALSE, destfile)
}
\author{
Melina Houle
}
