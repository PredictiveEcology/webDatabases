% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hashDownload.R
\docType{methods}
\name{hashDownload}
\alias{hashDownload}
\title{Download, unzip, untar data from an url}
\usage{
hashDownload(urls, destfile, sim, module, checkhash = FALSE, quick = FALSE,
  dbHash = "dbHash.sqlite", cascade = FALSE, quiet = TRUE)
}
\arguments{
\item{urls}{A character string naming the URL of a resource to be downloaded}

\item{destfile}{A character string. Indicate the name where the downloaded file is saved. Default will use the
modulePath from the sim object, if supplied with a module name, or a temporary location based on the
url of the file(s).}

\item{sim}{A simList simulation object, generally produced by simInit.}

\item{module}{A character string representing the names of the module to be loaded for the simulation.}

\item{checkhash}{A logical argument. If TRUE, check if file is found locally and cross-check its checksum value
with value logged in dbHash from previous download. When checksums match, a message raises indicating the file
is properly downloaded. No download occurs. When checksums don't match or file doesn't exist locally
(first download), download occurs and checksum compiles. If FALSE, download occurs even if the file exists
locally. Default is FALSE.}

\item{quick}{A logical argument. If TRUE, checksum is compiled using the combination of the filename and its size.
If FALSE, cheksum is compiled using the object. Default is FALSE.}

\item{dbHash}{A character string. The path to the database file where checksum values are logged. If the named
database does not yet exist, one is created. Default is "dbHash.sqlite".}

\item{cascade}{A logical argument. If TRUE, file is untar and/or unzip. Default is FALSE.}

\item{quiet}{A logical argument. If TRUE, suppress status messages (if any), and the progress bar.}
}
\value{
Data will be stored in the subfolder using the basename of the url in a data folder.
}
\description{
This function download and untar and/or unzip dataset using url link from available dataset. Prior to download, the function
can check if the files are already locally by using the checksum value available in dbHash.sqlite database.
}
\examples{
library(SpaDES)
sim <- SpaDES::simInit(times = list(start=0.0, end=5.0),
                       objects=list(),
                       params = list(),
                       modules = list(),
                       paths = list(outputPath=tempdir()))
url<-"ftp://ccrp.tor.ec.gc.ca/pub/EC_data/AHCCD_daily/ZMekis_Vincent_2011.pdf"
dwdData(urls = url, destfile = tempdir(), sim, module, checkhash = FALSE, cascade = FALSE)
}
\author{
Melina Houle
}
