% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hashDownload.R
\docType{methods}
\name{hashDownload}
\alias{hashDownload}
\title{Download, untar and unzip file from url source log checksum value to avoid repeating action.}
\usage{
hashDownload(urls, destfile, sim, module, checkhash = FALSE, quick = FALSE,
  dbHash = "dbHash.sqlite", cascade = FALSE, quiet = TRUE)
}
\arguments{
\item{urls}{A character string. Represents the URL of file to be downloaded}

\item{destfile}{A character string. Indicates the path where downloaded file is saved. Default will use the
modulePath from the sim object, if supplied with a module name, or a temporary location based on the
url of the file(s).}

\item{sim}{A simList simulation object, generally produced by simInit.}

\item{module}{A character string. Represents the names of the module to be loaded for the simulation.}

\item{checkhash}{A logical argument. If TRUE, check if file exists locally and cross-check
checksum value with value logged from previous download. When checksums match, no download occurs.
When checksums don't match or file doesn't exist locally (i.e., first download), download occurs and
checksum compiles. If FALSE, file is downloaded even if it is found locally. Default is FALSE.}

\item{quick}{A logical argument. If TRUE, checksum is compiled using the combination of the filename and its size.
If FALSE, cheksum is compiled using the object. Default is FALSE.}

\item{dbHash}{A character string. The path to the database file where checksum value of file is logged. If the
database does not yet exist, one is created. Default is "dbHash.sqlite".}

\item{cascade}{A logical argument. If TRUE, file is untar and/or unzip. Default is FALSE.}

\item{quiet}{A logical argument. If TRUE, suppress status messages (if any), and the progress bar.}
}
\value{
Downloaded file are stored in the destfile folder.
}
\description{
This function download iles from internet using url address and untar or unzip them. To avoid downloading
existing files, the function verify if files exist locally.  and compare checksum value from previous download.
}
\examples{
library(SpaDES)
sim <- SpaDES::simInit(times = list(start=0.0, end=5.0),
                       objects=list(),
                       params = list(),
                       modules = list(),
                       paths = list(outputPath=tempdir()))
url<-"ftp://ccrp.tor.ec.gc.ca/pub/EC_data/AHCCD_daily/ZMekis_Vincent_2011.pdf"
hashDownload(urls = url, destfile = tempdir(), sim, module, checkhash = FALSE, cascade = FALSE)
}
\author{
Melina Houle
}
