% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hashDownload.R
\docType{methods}
\name{hashDownload}
\alias{hashDownload}
\title{Download files from internet using url address and untar or unzip them.}
\usage{
hashDownload(urls, destfile, sim, module, checkhash = FALSE, quick = FALSE,
  dbHash = "dbHash.sqlite", cascade = FALSE, quiet = TRUE)
}
\arguments{
\item{urls}{A character string. Represents the url of file to be downloaded.}

\item{destfile}{Character string giving the path where the downloaded file is saved.
Default will use the \code{modulePath} from the \code{sim} object,
if supplied with a module name, or a temporary location based on the
url of the file(s).}

\item{sim}{A \code{simList} simulation object, generally produced by \code{SpaDES::simInit}.}

\item{module}{A character string. Represents the names of the module to be loaded for the simulation.}

\item{checkhash}{Logical. If \code{TRUE}, check if file exists locally and cross-check
checksum value with value logged from previous download. When checksums match, no download occurs.
When checksums don't match or file doesn't exist locally (i.e., first download), download occurs and
checksum compiles. If \code{FALSE} (default), file is downloaded even if it is found locally.}

\item{quick}{Logical. If \code{TRUE}, checksum is compiled using the combination of the filename and its size.
If \code{FALSE} (default), cheksum is compiled using the object.}

\item{dbHash}{A character string. The path to the database file where checksum value of file is logged. If the
database does not yet exist, one is created. Default is \code{"dbHash.sqlite"}.}

\item{cascade}{Logical. If \code{TRUE}, file is untar and/or unzip. Default is \code{FALSE}.}

\item{quiet}{Logical. If \code{TRUE}, suppress status messages (if any), and the progress bar.}
}
\value{
Invoked for its side-effect of downloading files to the \code{destfile/} directory.
}
\description{
To avoid downloading existing files, the function verify if files exist locally,
and compare checksum value from previous download.
}
\examples{
sim <- SpaDES::simInit(times = list(start = 0.0, end = 5.0),
                       objects = list(),
                       params = list(),
                       modules = list(),
                       paths = list(outputPath = tempdir()))
url <- "ftp://ccrp.tor.ec.gc.ca/pub/EC_data/AHCCD_daily/ZMekis_Vincent_2011.pdf"
hashDownload(urls = url, destfile = tempdir(), sim, module, checkhash = FALSE, cascade = FALSE)

}
\author{
Melina Houle
}
